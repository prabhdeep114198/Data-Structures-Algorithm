import java.util.Scanner;
class Queue {
	int front, rear, size;
	int capacity;
	int array[];

	public Queue(int capacity)
	{
		this.capacity = capacity;
		front = this.size = 0;
		rear = capacity - 1;
		array = new int[this.capacity];
	}
	boolean isFull(Queue queue)
	{
		return (queue.size == queue.capacity);
	}
	boolean isEmpty(Queue queue)
	{
		return (queue.size == 0);
	}
	void enqueue(int item)
	{
		if (isFull(this))
			return;
		this.rear = (this.rear + 1)% this.capacity;
		this.array[this.rear] = item;
		this.size = this.size + 1;
		System.out.println(item+ " enqueued to queue");
	}

	int dequeue()
	{
		if (isEmpty(this))
			return Integer.MIN_VALUE;

		int item = this.array[this.front];
		this.front = (this.front + 1)% this.capacity;
		this.size = this.size - 1;
		return item;
	}
	int front()
	{
		if (isEmpty(this))
			return Integer.MIN_VALUE;

		return this.array[this.front];
	}

	int rear()
	{
		if (isEmpty(this))
			return Integer.MIN_VALUE;

		return this.array[this.rear];
	}
}
public class queue_using_array {
	public static void main(String[] args)
	{
		Scanner sc = new Scanner(System.in);
		Queue queue = new Queue(1000);
		 String st = "n";
        String str ="";
		do{
        System.out.println("enter Y or N");
        str = sc.next();
		System.out.println("enter your choice \n1 for enqueue \n2 for dequeue \n3 for front \n4 for rear \n for printing");
		int a = sc.nextInt();
		switch(a){
			case 1:{
				System.out.println("enter a number");
				int enq = sc.nextInt();
				queue.enqueue(enq);
			}
			break;
			case 2:{
				queue.dequeue();
			}
			break;
			case 3:{
				System.out.println("front element is "+queue.front());
			}
			break;
			case 4:{
				System.out.println("rear element is "+queue.rear());
			}
			break;
			 default:{
            }
                break;
		    }
		}
		while(!str.equals(st));
	}
}
